---
description: Guidelines for validating changes to memory files
globs: tasks/**,docs/**
alwaysApply: false
---

# Change Validation Protocol

## Pre-Edit Analysis

- **‚úÖ DO:** Always perform these checks before editing:
  - Analyze the entire file to understand existing structure
  - Identify section purposes and relationships
  - Note heading hierarchy and formatting patterns
  - Identify any existing issues to be addressed
  - Create a mental map of the document's logical flow
  - Review all cross-references to and from the document
  - Document key insights from review before making changes

- **‚ùå DON'T:**
  - Edit files based only on the visible excerpt
  - Assume section purposes without verification
  - Begin editing without understanding the full context
  - Skip reviewing related memory files referenced in the document

## Structure Validation

- **Heading Hierarchy Check:**
  - Maintain consistent heading levels (H1 > H2 > H3)
  - Preserve existing section organization
  - Check that new headings fit logically in the hierarchy

- **Section Integrity Check:**
  - Ensure no sections are inadvertently removed
  - Verify all required sections are present
  - Check that section content matches section purpose

- **Format Consistency Check:**
  - Verify consistent usage of formatting patterns
  - Check status indicators (‚úÖ, üîÑ) for consistency
  - Ensure list styles and indentation are maintained

## Content Flow Validation

- **Flow Coherence Check:**
  - Verify logical progression between sections
  - Check for smooth transitions between existing and new content
  - Ensure content grouping makes logical sense
  - Integrate new content into the existing structure rather than appending
  - Maintain narrative flow throughout the document
  - Use appropriate transitional language between sections

- **Integration Quality Check:**
  - Verify new content is woven into existing structure
  - Check that new information enhances rather than disrupts flow
  - Ensure updates are distributed to appropriate sections
  - Confirm updates align with the document's overall purpose

- **Duplication Check:**
  - Scan for duplicated or nearly identical content
  - Verify information exists in only one appropriate place
  - Check for contradictory information across sections
  - Use keyword and concept mapping to identify similar content
  - Resolve duplication by consolidating or cross-referencing

- **Deduplication Process:**
  1. Identify similar content with keyword scanning
  2. Compare content for conceptual overlap
  3. Choose the most appropriate location for the information
  4. Consolidate content or add cross-references
  5. Remove redundant content from inappropriate locations

- **Reference Integrity Check:**
  - Verify all internal references are valid
  - Check cross-references between files
  - Ensure link text accurately describes destinations

## Post-Edit Review Process

1. **Perform a mental diff review:**
   ```markdown
   # Before editing:
   - Note existing structure
   - Identify key content
   - Document heading hierarchy

   # After editing:
   - Compare to original structure
   - Verify key content preservation
   - Check heading hierarchy consistency
   ```

2. **Apply these validation questions:**
   - Does the edit maintain structural integrity?
   - Is all content properly integrated (not just appended)?
   - Are section purposes preserved?
   - Is the content flow logical and coherent?
   - Have all duplications been resolved?

3. **Before finalizing:**
   - Review the entire file after changes
   - Check consistency with related memory files
   - Verify adherence to all memory file rules

## Change Explanation Framework

When implementing changes to memory files, document the reasoning behind your changes using this framework:

### Change Rationale Categories

- **Structural Improvements:**
  - Reorganization for enhanced readability
  - Hierarchy adjustments for proper content nesting
  - Format standardization for consistency

- **Content Enhancements:**
  - Clarification of ambiguous information
  - Addition of missing context
  - Correction of inaccurate information
  - Expansion of incomplete sections

- **Integration Updates:**
  - Cross-reference additions for related content
  - Alignment with related documents
  - Synchronization with architectural changes
  - Reconciliation of conflicting information

### Change Documentation Elements

Each change explanation should include:

1. **Change Summary:** Brief overview of what was modified
2. **Rationale Category:** Which category from above best describes the change
3. **Specific Justification:** Exact reasoning behind this particular change
4. **Impact Assessment:** How this change affects related content or processes
5. **Alternative Approaches:** What other solutions were considered, if applicable

### Change Documentation Template

```markdown
## Change Explanation

### Change Summary
[Brief description of the change]

### Rationale
Category: [Structural/Content/Integration]
Justification: [Specific reason for making this change]

### Impact
[How this change affects other documentation or processes]

### Alternatives Considered
[If applicable, what other approaches were evaluated]
```

- **‚úÖ DO:**
  - Document rationale immediately after making significant changes
  - Link changes to specific requirements or issues when possible
  - Explain why the change improves the documentation
  - Consider how the change benefits future readers

- **‚ùå DON'T:**
  - Leave change reasoning implicit or unclear
  - Focus only on what was changed without explaining why
  - Skip documentation for "minor" changes that affect content meaning
  - Use vague terms like "improved" without specific details
