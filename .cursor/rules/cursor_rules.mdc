---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: 
alwaysApply: true
---

# Cursor Rules Management Guidelines

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext,other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;

  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

## Rule Integration Standards

### Cross-Referencing System
- Use the `rule:` prefix and `mdc:` protocol to reference other rules (only applies to .mdc files in the .cursor/rules directory):
  - Example:
    ```markdown
    [rule:change_validation](mdc:.cursor/rules/change_validation.mdc)
    ```
- Include a "Related Rules" section in each rule file listing direct dependencies
- Specify the relationship type:
  - `requires`: Rule depends on another rule
  - `extends`: Rule builds upon another rule
  - `complements`: Rules work together but aren't dependent
  - `impacts`: Changes to this rule affect another rule

### Rule Hierarchy
- Core Rules: Fundamental guidelines (e.g., cursor_rules, content_context)
- Process Rules: Workflow and validation (e.g., change_validation, changesets)
- Domain Rules: Specific technology or domain guidelines
- Meta Rules: Rules about managing and improving rules

### Integration Requirements
1. Content Context Alignment
   - All rules must follow content context timeframes
   - Include context markers: [Current], [Recent], [Historical], [Planned]

2. Change Validation Compliance
   - Rules must specify validation requirements
   - Reference relevant validation protocols

3. Version Control
   - Track rule versions using semantic versioning
   - Document breaking changes in rule relationships

4. Maintenance Guidelines
   - Regular review of rule dependencies
   - Update cross-references when rules change
   - Validate integration points during updates

  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
