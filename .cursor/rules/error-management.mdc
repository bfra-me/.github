---
description: Framework for diagnosing, resolving, and documenting errors
globs: 
alwaysApply: true
---

# Error Management Framework

## Integration Points
- @rule:knowledge_graph_management (requires) - Error pattern storage
- @rule:mcp-tool-usage (requires) - Debugging tools
- @rule:content_context (requires) - Error timeline

## Error Knowledge Base

### 1. Error Categories
- **Workflow Errors**
  - GitHub Actions failures
  - CI/CD pipeline issues
  - Automation breakdowns
- **Development Errors**
  - TypeScript configuration
  - Build process failures
  - Runtime exceptions
- **Security Issues**
  - Vulnerability alerts
  - Access control problems
  - Dependency risks

### 2. Debugging Protocol
1. **Context Gathering**
   - Load relevant knowledge about errors
   - Review similar patterns
   - Collect system state information

2. **Analysis Process**
   - Apply Sequential Thinking
   - Match against known patterns
   - Use MCP tools for investigation

3. **Resolution Steps**
   - Document solution approach
   - Update knowledge with findings
   - Create error pattern entry

## Tool Integration
- **Sequential Thinking for problem decomposition**
- **Web search for similar issues**
- **Knowledge Graph for pattern matching**

## Pattern Management
1. **Pattern Recording**
   - Document error signature
   - List observed symptoms
   - Detail resolution steps
   - Outline prevention measures
   - Link related patterns

2. **Pattern Application**
   - Match current errors against patterns
   - Apply known solutions
   - Track effectiveness

## Documentation Protocol
1. **Error Documentation**
   - Symptoms and context
   - Root cause analysis
   - Resolution steps
   - Prevention measures

2. **Knowledge Update**
   - Add new patterns
   - Update existing solutions
   - Track pattern effectiveness

## Validation Requirements
- **Verify pattern matches**
- **Test solution effectiveness**
- **Document outcomes**
- **Update prevention measures**

## <DEBUGGING>
Below debugging routine is for persistent errors or incomplete fixes. Use this routine only when stuck.

### <DIAGNOSE>
- Gather all error messages, logs, and behavioral symptoms
- Add relevant context from files
- Retrieve relevant project architecture, plan and current working task
</DIAGNOSE>

### Effective Debugging Steps
- When failing with tests, always add more context using <DIAGNOSE>
- Explain OBSERVATIONS and provide REASONING for your conclusions
- If unsure, gather more OBSERVATIONS to precisely identify issues
- Understand architecture relevant to the issue
- Use step-by-step reasoning to consider all possible causes
- Look for similar patterns already solved elsewhere
- Present your fix with clear reasoning
- Systematically modify code to implement fixes
</DEBUGGING>

## Error Documentation Template
```
### Error Type: [Category]

#### Error: [Brief Description]
- **Symptoms**: [Observable issues]
- **Root Cause**: [Underlying problem]
- **Resolution**: [Solution steps]
- **Prevention**: [How to avoid in future]
