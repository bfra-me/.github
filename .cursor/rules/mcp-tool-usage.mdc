---
description: Guidelines for agents using tools provided by available Model Context Protocol (MCP) servers
globs:
alwaysApply: true
---

# Model Context Protocol (MCP) Tool Usage

These instructions are automatically active for all conversations in this project. All available tools (Sequential Thinking, Brave Search, Tavily, Fetch, Puppeteer, FireCrawl, and Knowledge Graph) should be utilized as needed without requiring explicit activation.

- **Related Rules:**
  - [content-context.mdc](mdc:.cursor/rules/content-context.mdc) (requires) - Context management for tool outputs
  - [knowledge-graph.mdc](mdc:.cursor/rules/knowledge-graph.mdc) (complements) - Memory persistence
  - [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) (requires) - Tool output validation

## Activation Patterns
- "search web for X": Trigger web search tools (Brave Search, Tavily)
- "scrape content from X": Activate web scraping tools (FireCrawl, Puppeteer)
- "think through X step by step": Engage Sequential Thinking
- "remember X about Y": Access the knowledge graph
- "update memory with X": Store new information in the knowledge graph
- "explore X in depth": Combine multiple tools for comprehensive analysis

## Success Patterns
- Tools are used proactively without user prompting
- Multiple tools are combined effectively
- Tool outputs are validated and cross-referenced
- Knowledge is persistently stored
- Context is maintained across tool usage

## Tool Categories and Usage Guidelines

### Reasoning (Sequential Thinking)
- **Primary Use Cases:**
  - Complex problem decomposition
  - Multi-step solution planning
  - Decision tree analysis
  - Hypothesis validation
- **Integration Pattern:**
  ```mermaid
  flowchart TD
      Start[Problem Identification] --> Think[Sequential Thinking]
      Think --> Search[Web Search/Research]
      Search --> Validate[Knowledge Graph Check]
      Validate --> Conclude[Solution Formation]
      Conclude --> Document[Update Memory]
  ```

### Information Gathering (Brave Search, Puppeteer, FireCrawl)
- Use **Brave Search, Puppeteer, and FireCrawl MCP servers** when troubleshooting, searching documentation, or exploring similar user issues.
- Combine effectively with **Sequential Thinking MCP** to refine solutions and acquire up-to-date information.
- Prioritize reliable and concise sources.

### Knowledge Graph (Memory)
- Use the knowledge graph to store and retrieve information that persists across conversations.
- Link related entities through meaningful relations that capture the nature of their connection.
- **Knowledge Graph Update Template:**
  When updating the knowledge graph, document your changes using this format:
  ```markdown
  Knowledge Graph Updates:
  - Entity created: [EntityName] (Type: [EntityType])
    Observations: ["Observation 1", "Observation 2"]
  - Relation added: [EntityA] [relation_type] [EntityB]
  - Observations added to [EntityName]: ["New observation"]
  Rationale: [Brief explanation of why this update was necessary]
  ```

## Preference Recording Protocol

- **Preference Categories:**
  - **Documentation Preferences**: Format, style, organization, examples
  - **Development Practices**: Coding standards, patterns, architecture
  - **Tool Configurations**: Editor settings, build configurations, workflow
  - **Communication Style**: Verbosity, formality, technical depth
  - **Process Preferences**: Workflow, collaboration, review process

- **Preference Recording Triggers:**
  - Explicit statements of preference: "I prefer...", "I like...", "Please use..."
  - Corrections to agent behavior: "Don't do X", "Instead of X, do Y"
  - Positive feedback on specific approaches: "This is good", "I like how you..."
  - Consistent pattern of choices when options are presented
  - Repeated requests for specific information or formats

- **Preference Entity Structure:**
  ```json
  {
    "name": "Documentation_Preference_Markdown",
    "entityType": "preference",
    "observations": [
      "Prefers markdown code blocks with language specifiers",
      "Prefers concise explanations with examples",
      "Source: explicitly stated on 2023-06-15",
      "Confidence: high"
    ]
  }
  ```

- **Preference Relation Example:**
  ```json
  {
    "from": "default_user",
    "to": "Documentation_Preference_Markdown",
    "relationType": "has_preference_for"
  }
  ```

- **Implementation Steps:**
  1. Identify potential preference in user communication
  2. Categorize the preference
  3. Check for existing related preferences using `search_nodes`
  4. Create or update preference entity with `create_entities` or `add_observations`
  5. Link the preference to the user with `create_relations`
  6. Confirm preference with user when confidence is low
  7. Apply preference in future interactions

- **Preference Conflict Resolution:**
  - Prioritize explicit preferences over inferred ones
  - Consider recency for similar preferences (include dates in observations)
  - Use more specific preference over general ones
  - When in doubt, ask for clarification
  - Document conflicting preferences with context
