---
description: Guidelines for creating and maintaining project Memory Files for comprehensive project documentation
globs:
alwaysApply: false
---

# Memory Files Management

- **Related Rules:**
  - [knowledge-graph.mdc](mdc:.cursor/rules/knowledge-graph.mdc) (complements) - Semantic information storage
  - [content-context.mdc](mdc:.cursor/rules/content-context.mdc) (requires) - Temporal context management
  - [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) (requires) - Change validation protocol

## Activation Patterns
- "update memory files": Trigger memory file updates
- "document current state": Record current project state
- "refresh documentation": Update all relevant memory files
- "capture project context": Store comprehensive context

## File Hierarchy
```mermaid
flowchart TD
    PB[product_requirement_docs.md] --> PC[technical.md]
    PB --> SP[architecture.md]

    SP --> TC[tasks_plan.md]
    PC --> TC
    PB --> TC

    TC --> AC[active_context.md]

    AC --> ER[error-management.mdc]
    AC --> LL[lessons-learned.mdc]

    subgraph LIT[docs/literature]
        L1[...]
        L2[...]
    end

    subgraph RFC[tasks/rfc]
        R1[...]
        R2[...]
    end

    PC -.-> LIT
    TC -.-> RFC
```

## Core Files Structure

- **Required Core Files:**
  - [product_requirement_docs.md](mdc:docs/product_requirement_docs.md): Product requirements, problems solved, scope
  - [architecture.md](mdc:docs/architecture.md): System architecture, component relationships
  - [technical.md](mdc:docs/technical.md): Development environment, tech stack, technical decisions
  - [tasks_plan.md](mdc:tasks/tasks_plan.md): Task backlog, project progress, known issues
  - [active_context.md](mdc:tasks/active_context.md): Current work focus, recent changes, next steps
  - [error-management.mdc](mdc:.cursor/rules/error-management.mdc): Known issues and their resolution
  - [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc): Project patterns, preferences, intelligence

- **Optional Context Files:**
  - `docs/literature/`: Research and literature survey
  - `tasks/rfc/`: Request for comments for individual tasks

## Working Modes

### PLAN/Architect MODE
- **When to use:**
  - Developing project architecture
  - Planning new features
  - Designing system components
  - Creating implementation strategies

- **Process Flow:**
  ```mermaid
  flowchart TD
      Start[Start] --> ReadFiles[Read Memory Files]
      ReadFiles --> CheckFiles{Files Complete?}

      CheckFiles -->|No| Plan[Create Plan]
      Plan --> DocumentChat[Document in Chat]

      CheckFiles -->|Yes| VerifyContext[Verify Context]
      VerifyContext --> Strategy[Develop Strategy]
      Strategy --> Present[Present Approach]

      Present --> Verification{Approach Verified?}

      Verification -->|No| Clarify[Seek Clarification]
      Clarify --> Strategy

      Verification -->|Yes| DocumentMemory[Document in Memory Files]
  ```

### ACT/Code MODE
- **When to use:**
  - Implementing planned features
  - Fixing bugs
  - Refactoring code
  - Writing tests

- **Process Flow:**
  ```mermaid
  flowchart TD
      Start[Start] --> Context[Check Memory Files]
      Context --> Update[Update Documentation]
      Update --> Rules[Update lessons-learned & error-documentation]
      Rules --> Execute[Execute Task]
      Execute --> Document[Document Changes in Memory Files]
  ```

## Knowledge Graph Integration

### Entity Representation
- **Create entities for memory files**
  - Type: `DocumentEntity`
  - Purpose: Store metadata about documentation
  - Relations: Connect to related components

- **Link documentation to components**
  - Create bidirectional relationships
  - Track documentation coverage
  - Monitor update requirements

### Content Tracking
- **Extract key concepts as entities**
  - Create component entities from architecture docs
  - Extract requirements as requirement entities
  - Link tasks to requirements

- **Store documentation update history**
  - Track changes over time
  - Record rationale for changes
  - Monitor evolution of documentation

## File Content Guidelines

- **All memory files must follow standard templates**
  - See [memory-templates.mdc](mdc:.cursor/rules/memory-templates.mdc) for required templates
  - Templates ensure consistent structure across all memory files
  - Variations must maintain the core structure while extending as needed

## Documentation Integration Best Practices

- **‚úÖ DO:**
  - Integrate new content within the existing structure
  - Update affected sections throughout the document
  - Maintain narrative flow when adding information
  - Revise surrounding content to accommodate updates
  - Use consistent terminology across updates

  ```markdown
  ## Before:
  ### Component Architecture
  - Component A handles authentication
  - Component B manages user sessions

  ## After (integrated update):
  ### Component Architecture
  - Component A handles authentication and identity verification
  - Component B manages user sessions and state persistence
  - Component C coordinates between A and B for security enforcement
  ```

- **‚ùå DON'T:**
  - Simply append new information at the end of sections
  - Add content without revising affected areas
  - Create sections that duplicate existing information
  - Break narrative flow with isolated updates

### Content Context Management
- **Content must be placed in appropriate contexts:**
  - See [content-context.mdc](mdc:.cursor/rules/content-context.mdc) for context classification
  - Apply progressive disclosure principle (most current/relevant information first)
  - Maintain contextual relationship between related content
  - Migrate content between sections as timeframes change

### [product_requirement_docs.md](mdc:docs/product_requirement_docs.md)
- **‚úÖ DO:**
  - Keep problem statements clear and concise
  - Update scope as project evolves
  - Maintain clear success criteria

  ```markdown
  ## Project Overview

  ### Purpose
  This repository serves as...

  ### Problems Solved
  1. **Standardization**: Provides consistent...
  2. **Automation**: Streamlines repository...

  ### Core Requirements

  #### 1. Repository Settings Management
  - Maintain organization-wide...
  ```

- **‚ùå DON'T:**
  - Mix implementation details with requirements
  - Leave outdated information

### [architecture.md](mdc:docs/architecture.md)
- **‚úÖ DO:**
  - Use mermaid diagrams for visual clarity
  - Show component relationships
  - Document data flows

  ```markdown
  ## System Overview

  ### High-Level Architecture
  ```mermaid
  graph TD
      A[Component] --> B[Component]
      B --> C[Component]
  ```

  ## Component Architecture

  ### 1. Component Name
  - Purpose
  - Integration points
  ```

- **‚ùå DON'T:**
  - Include implementation-specific details
  - Mix architecture with technical choices

### [technical.md](mdc:docs/technical.md)
- **‚úÖ DO:**
  - Document development environment
  - Explain technical decisions and rationale
  - Keep tool versions updated

  ```markdown
  ## Development Environment

  ### Core Technologies
  - **Node.js**: Version specified in...
  - **Package Manager**: pnpm@10.8.1

  ## Technical Decisions and Rationale

  ### ESM Modules
  - Better tree-shaking
  - Native async/await support
  ```

- **‚ùå DON'T:**
  - Include architecture information
  - Mix with task planning

### [tasks_plan.md](mdc:tasks/tasks_plan.md)
- **‚úÖ DO:**
  - Clearly mark task status
  - Document known issues
  - Update progress regularly

  ```markdown
  ## Current Status
  Version: 2.3.5
  Status: Active Development

  ## Completed Tasks

  ### Core Setup ‚úÖ
  - [x] Initialize repository with TypeScript

  ## In Progress Tasks

  ### Documentation Enhancement üîÑ
  - [ ] API documentation for workflows
  ```

- **‚ùå DON'T:**
  - Mix with technical details
  - Leave completed tasks unmarked

### [active_context.md](mdc:tasks/active_context.md)
- **‚úÖ DO:**
  - Focus on current work
  - Document recent changes
  - Outline immediate next steps

  ```markdown
  ## Current Development Focus

  ### Active Development Areas
  1. **Documentation Enhancement**
     - API documentation for workflows
     - Usage examples

  ## Next Steps

  ### Immediate Actions
  1. **Documentation**
     - Complete API documentation
  ```

- **‚ùå DON'T:**
  - Include long-term planning
  - Mix with technical details

### [error-management.mdc](mdc:.cursor/rules/error-management.mdc)
- **‚úÖ DO:**
  - Document issues and their resolution
  - Include error details and context
  - Categorize errors by type

  ```markdown
  ## Critical Errors

  ### Error Type: Configuration

  #### Error: Invalid TypeScript Configuration
  - **Symptoms**: tsc fails with "Cannot find module..."
  - **Root Cause**: Incorrect module resolution in tsconfig.json
  - **Resolution**: Changed moduleResolution to "node"
  ```

- **‚ùå DON'T:**
  - Leave resolution steps unclear
  - Mix with feature planning

### [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc)
- **‚úÖ DO:**
  - Document recurring patterns
  - Record user preferences
  - Note project-specific approaches

  ```markdown
  ## Development Patterns

  ### Workflow Structure
  - Always use reusable workflows over repository-specific ones
  - Implement proper error handling in each workflow
  - Document all inputs and outputs
  ```

- **‚ùå DON'T:**
  - Include temporary workarounds
  - Mix with task planning

## Maintenance Best Practices

- **Regular Reviews:**
  - Ensure all Core Files are up-to-date before starting new work
  - Review for consistency across documents
  - Validate architectural decisions against implementation

- **Change Validation:**
  - Apply [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) protocol to all memory file updates
  - Perform structural validation before submitting changes
  - Review content flow to ensure logical organization
  - Validate cross-reference integrity across files

## Cross-Reference Management

- **Cross-Reference Types:**
  - **Direct Links:** Explicit links to other memory files
  - **Conceptual References:** Mentions of related topics
  - **Dependency References:** Links to files this document depends on
  - **Implementation References:** Links to code or examples

- **Cross-Reference Best Practices:**
  - Include brief context with each cross-reference
  - Verify all cross-references are valid before committing
  - Use bidirectional references where appropriate
  - Group related cross-references logically

- **Cross-Reference Syntax:**
  ```markdown
  - Related architecture: [Component Architecture](/docs/architecture.md#component-architecture)
  - See also: [Error Handling](/.cursor/rules/error-management.mdc) for exception patterns
  - Implementation: [Authentication Flow](/src/auth/README.md)
  ```

## Version History Management

- **Version Tracking Requirements:**
  - All memory files should include version history for significant changes
  - Track major content revisions, structural changes, and architectural decisions
  - Document rationale behind changes, not just the changes themselves
  - Preserve historical context while maintaining current accuracy

- **Version History Template:**
  ```markdown
  ## Version History

  ### 2023-11-15: Major Update
  - **Changes:** Restructured authentication workflow to support OAuth 2.0
  - **Rationale:** Improved security and third-party integration support
  - **Affected Sections:** Authentication Components, API Endpoints
  - **Related Documents:** [OAuth Design RFC](/tasks/rfc/oauth-design.md)
  ```

- **‚úÖ DO:**
  - Track version history consistently across all memory files
  - Document rationale for significant changes
  - Preserve historical evolution while keeping content current
  - Link version history entries to related documentation
  - Include version headers for critical documents

- **‚ùå DON'T:**
  - Track trivial changes that don't affect meaning or structure
  - Remove historical context that explains current design decisions
  - Let version histories grow excessively long (consider archiving older entries)
  - Include detailed implementation notes better suited for commit messages

## Rule Preprocessing Integration

- **Rule Preprocessing Application:**
  - Apply preprocessing principles from [rule-preprocessing.mdc](mdc:.cursor/rules/rule-preprocessing.mdc) to ensure:
    - Rules are consistently structured
    - Dependencies between rules are properly managed
    - Rules are applied in the correct sequence
    - Memory file updates follow standardized metadata patterns

- **Memory File Rule Processing:**
  ```mermaid
  flowchart TD
      Start[Memory File Update] --> Load[Load Rule Files]
      Load --> Preprocess[Apply Rule Preprocessing]
      Preprocess --> Filter[Filter Relevant Rules]
      Filter --> Order[Order by Dependencies]
      Order --> Execute[Execute Rule Application]
      Execute --> Validate[Validate Results]
      Validate --> Document[Document Changes]
  ```

- **Rule Dependency Management:**
  - Memory files should track their rule dependencies
  - Include rule version information when referencing rules
  - Use standardized metadata structure for all memory file entries

- **Rule-Memory File Synchronization:**
  - Memory files should reflect current rule state
  - Update memory files when rules change
  - Validate memory file content against current rule requirements
  - Document rule application in memory file change history
