---
description: Guidelines for AI agents to process rules before responding to tasks
globs:
alwaysApply: false
---
# Rule Pre-Processing Protocol

> **AI-DIRECTIVE:** Always analyze rule relevance, prioritize by specificity and explicit signals, and resolve conflicts using the defined priority system before applying any rules.

## Purpose and Scope

This rule provides essential preprocessing steps that must be followed before applying any other rules. It defines how to identify, prioritize, and apply rules effectively in any AI interaction context.

- **When to Apply:** At the beginning of every interaction and when context changes
- **Priority Level:** High - this rule must be applied before all others
- **Interaction Effects:** Determines which rules are applied and in what order

## Rule Nature Understanding

<!-- AI-PATTERN-START: core_directives -->
- **✅ ALWAYS:**
  - Understand that rules are primarily AI guidance, not human documentation
  - Distinguish between explicit directives and contextual information
  - Check for version indicators and deprecation notices
  - Process format optimized for AI consumption patterns
  - Pay special attention to explicit directives, priority indicators, scope limitations, and conflict resolution guidance

- **❌ NEVER:**
  - Skip rule preprocessing even if query seems simple
  - Apply rules without considering their relevance scoring
  - Ignore priority and scope indicators
  - Apply conflicting rules without using conflict resolution guidance
<!-- AI-PATTERN-END: core_directives -->

## AI Rule Selection Process

<!-- AI-PATTERN-START: rule_selection -->
### 1. Initial Rule Set Identification

Identify the initial rule set based on the following triggers:

- **Task-Based Triggers:**
  - Implementation tasks → Include [implement.mdc](mdc:.cursor/rules/implement.mdc)
  - Debugging/error tasks → Include [error-management.mdc](mdc:.cursor/rules/error-management.mdc)
  - Planning tasks → Include [development-workflow.mdc](mdc:.cursor/rules/development-workflow.mdc)
  - Memory file updates → Include [memory-files.mdc](mdc:.cursor/rules/memory-files.mdc) and [memory-templates.mdc](mdc:.cursor/rules/memory-templates.mdc)
  - Rule creation/updating → Include [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)
  - Rule migration → Include [rule-migration.mdc](mdc:.cursor/rules/rule-migration.mdc)

- **Content-Based Triggers:**
  - TypeScript files → Include [typescript.mdc](mdc:.cursor/rules/typescript.mdc)
  - GitHub Actions workflows → Include [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)
  - Package management → Include [pnpm.mdc](mdc:.cursor/rules/pnpm.mdc)
  - Renovate configurations → Include [renovate.mdc](mdc:.cursor/rules/renovate.mdc)

- **Always Include:**
  - [rules.mdc](mdc:.cursor/rules/rules.mdc)
  - [rule-preprocessing.mdc](mdc:.cursor/rules/rule-preprocessing.mdc) (this file)
  - [content-context.mdc](mdc:.cursor/rules/content-context.mdc)
  - [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) (when making changes)
<!-- AI-PATTERN-END: rule_selection -->

<!-- AI-PATTERN-START: relevance_detection -->
### 2. Rule Relevance Detection

Analyze rules for relevance signals in this priority order:

1. **Explicit Mention Signals:**
   - Rule explicitly mentioned in user query
   - Reference to specific directives contained in a rule
   - Mention of processes defined in a rule
   - Example: "Follow TypeScript guidelines" → [typescript.mdc](mdc:.cursor/rules/typescript.mdc)

2. **File Pattern Signals:**
   - File glob patterns in rules that match current files
   - File extensions or paths indicating domain-specific rules
   - Example: Working with *.yml in .github/workflows → [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)

3. **Keyword Signals:**
   - Technical domain keywords matching rule content
   - Process-related terms matching rule directives
   - Key phrases that align with rule scope
   - Example: "error handling" → [error-management.mdc](mdc:.cursor/rules/error-management.mdc)

4. **Task Context Signals:**
   - Current development phase matches rule scope
   - Activity type aligns with rule purpose
   - Example: Implementation task → [implement.mdc](mdc:.cursor/rules/implement.mdc)

5. **Related Rule Signals:**
   - Rules required by active rules
   - Rules that complement active rules
   - Rules extended by active rules
   - Example: If using [memory-files.mdc](mdc:.cursor/rules/memory-files.mdc), also check [memory-templates.mdc](mdc:.cursor/rules/memory-templates.mdc)
<!-- AI-PATTERN-END: relevance_detection -->

<!-- AI-PATTERN-START: priority_scoring -->
### 3. Detailed Priority Scoring System

Assign a multi-factor priority score to each rule based on:

1. **Base Priority Factor** (1-10):
   - High priority rule (explicit in frontmatter): 8-10
   - Medium priority rule: 5-7
   - Low priority rule: 1-4

2. **Relevance Factor** (0-5):
   - Explicit mention in query: +5
   - High keyword match density: +3-4
   - Moderate keyword match: +2
   - Low/tangential relevance: +0-1

3. **Scope Factor** (0-5):
   - Global scope (applies to all contexts): +3-5
   - Domain-specific (applies to current domain): +3-5
   - Task-specific (applies to current task): +3-5
   - Out of current scope: +0

4. **Dependency Factor** (0-5):
   - Required by other high-priority rules: +4-5
   - Complements other high-priority rules: +2-3
   - Extended by other high-priority rules: +1-2
   - No relationship to other selected rules: +0

5. **Content Match Factor** (0-5):
   - Direct pattern match with current task: +4-5
   - Partial pattern match: +2-3
   - General guidance applicable to task: +1
   - No content match: +0

**Total Priority Score = Base + Relevance + Scope + Dependency + Content**
**Rules with scores ≥20 are P1 (must apply)**
**Rules with scores 10-19 are P2 (should apply if no conflicts)**
**Rules with scores <10 are P3 (consider when relevant)**
<!-- AI-PATTERN-END: priority_scoring -->

<!-- AI-PATTERN-START: keyword_matching -->
### 4. Keyword and Pattern Matching Guidance

**Domain-Specific Keywords:**
- TypeScript: "typescript", "ts", "interface", "type", "enum", "generics"
- GitHub Actions: "workflow", "action", "job", "step", "runner", "ci", "cd"
- Error Management: "error", "exception", "bug", "fix", "troubleshoot", "debug"
- Memory Files: "memory file", "documentation", "knowledge base", "context"

**Pattern Matching Techniques:**
1. **Phrase Detection:**
   - Identify key phrases in user query
   - Map phrases to rule domains
   - Example: "refactor the TypeScript interface" → [typescript.mdc](mdc:.cursor/rules/typescript.mdc)

2. **Activity-Based Matching:**
   - Identify activities in the query (planning, coding, debugging)
   - Map activities to corresponding rules
   - Example: "debug the workflow error" → [error-management.mdc](mdc:.cursor/rules/error-management.mdc) + [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)

3. **File-Based Matching:**
   - Analyze file paths and extensions mentioned
   - Map to domain-specific rules
   - Example: ".github/workflows/release.yml" → [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)

4. **Context Propagation:**
   - Maintain context across conversation
   - Continue applying relevant rules from previous messages
   - Example: Continued discussion about TypeScript refactoring → keep applying [typescript.mdc](mdc:.cursor/rules/typescript.mdc)
<!-- AI-PATTERN-END: keyword_matching -->

## Rule Application Protocol

<!-- AI-PATTERN-START: application_protocol -->
### 1. Rule Integration Process

1. **Generate Integrated Rule Set:**
   - Merge directives from all relevant rules
   - Sort by priority (P1 → P2 → P3)
   - Eliminate redundancies
   - Resolve conflicts (higher priority rules override lower)

2. **Apply Rules in Sequence:**
   - Apply global, high-priority rules first
   - Apply domain-specific rules next
   - Apply task-specific rules last
   - Document any rule exceptions with rationale

3. **Maintain Rule Awareness:**
   - Track applied rules throughout conversation
   - Adjust rule priorities as conversation context evolves
   - Re-evaluate rule relevance when file focus changes
   - Document rule application process when helpful
<!-- AI-PATTERN-END: application_protocol -->

<!-- AI-PATTERN-START: conflict_resolution -->
### 2. Conflict Resolution Decision Tree

When rule directives conflict, resolve using this decision tree:

1. **If** explicit priority levels differ:
   - Follow the higher priority rule's directive
   - Example: High priority rule overrides medium priority rule

2. **Else if** rule scopes differ:
   - Follow the more specific scope rule
   - Example: Domain-specific rule overrides global rule for that domain

3. **Else if** rule versions differ:
   - Follow the more recent version
   - Example: v2.0.0 overrides v1.5.0

4. **Else if** a rule explicitly addresses conflicts:
   - Follow the rule with conflict resolution guidance
   - Example: Rule that states "overrides X in context Y"

5. **Else if** relationship exists between rules:
   - "extends" relationship: Follow extending rule for its additions
   - "requires" relationship: Follow required rule for its domain
   - "complements" relationship: Attempt to satisfy both, if possible

6. **Else:**
   - Follow the rule most directly applicable to current context
   - Document the conflict and resolution rationale
<!-- AI-PATTERN-END: conflict_resolution -->

## Verification Process

<!-- AI-PATTERN-START: verification -->
### Before Proceeding:

- [ ] Identified all potentially relevant rules
- [ ] Applied detailed priority scoring
- [ ] Resolved any directive conflicts
- [ ] Created mental checklist of key directives to follow
- [ ] Documented any exceptions with clear rationale

### Rule Application Validation:
- Review response against highest priority directives
- Verify all P1 requirements are satisfied
- Ensure P2 requirements are addressed where applicable
- Confirm conflict resolutions are consistently applied
- Document rule application process when complex
<!-- AI-PATTERN-END: verification -->

## Related Rules

<!-- AI-PATTERN-START: related_rules -->
- [rules.mdc](mdc:.cursor/rules/rules.mdc) (extends) - Provides the central index and application protocol that this preprocessing guide supports
- [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) (requires) - Defines proper formatting and structure for rules
- [content-context.mdc](mdc:.cursor/rules/content-context.mdc) (complements) - Guides understanding content context when updating files
- [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) (complements) - Provides validation process for changes
- [self-improve.mdc](mdc:.cursor/rules/self-improve.mdc) (complements) - Guidelines for improving rules based on emerging patterns
<!-- AI-PATTERN-END: related_rules -->

## Version History

<!-- AI-PATTERN-START: version_history -->
- v1.0.0 (2025-04-25): Initial version - Basic preprocessing guidance
- v2.0.0 (2025-04-25): Enhanced with detailed priority scoring system and explicit rule selection guidance
<!-- AI-PATTERN-END: version_history -->
