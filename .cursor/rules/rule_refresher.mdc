# Rule Refresher Protocol

## Rule Review Schedule

- **Core Rules:** Review at the start of each new conversation
  - [rules.mdc](mdc:.cursor/rules/rules.mdc)
  - [memory_files.mdc](mdc:.cursor/rules/memory_files.mdc)
  - [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc)

- **Task-Specific Rules:** Review when task type changes
  - Plan mode: [plan.mdc](mdc:.cursor/rules/plan.mdc)
  - Implement mode: [implement.mdc](mdc:.cursor/rules/implement.mdc)
  - Debug mode: [debug.mdc](mdc:.cursor/rules/debug.mdc)

- **Domain-Specific Rules:** Review when domain is relevant
  - TypeScript: [typescript.mdc](mdc:.cursor/rules/typescript.mdc)
  - GitHub Actions: [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)
  - Package management: [pnpm.mdc](mdc:.cursor/rules/pnpm.mdc)

## Rule Refresher Triggers

- **Automatically refresh rules when:**
  - Starting a new conversation
  - Switching between major task types
  - Encountering errors that suggest rule misalignment
  - Receiving feedback about rule adherence
  - After every 5 major task completions

## Progressive Rule Learning

- **Level 1: Core Knowledge**
  - Basic understanding of project structure
  - Memory file organization
  - Key documentation patterns

- **Level 2: Extended Knowledge**
  - Task-specific rule applications
  - Domain-specific best practices
  - Error handling and troubleshooting

- **Level 3: Advanced Knowledge**
  - Rule interrelationships and priority resolution
  - Edge case handling
  - Project-specific optimization patterns

## Rule Adherence Tracking

- **Track application frequency of:**
  - Most often applied rules
  - Least often applied rules
  - Rules with adherence challenges
  - Rules requiring clarification

- **Document rule application patterns:**
  - Note when rules provided valuable guidance
  - Identify when rules prevented potential issues
  - Record instances where rules conflicted

## Rule Summary Cards

### Core Memory File Rules
```markdown
Memory files (active_context.md, tasks_plan.md, technical.md) must:
1. Follow required templates and section structure
2. Maintain consistent heading hierarchy
3. Place content in appropriate timeframe sections
4. Integrate new content (not just append)
5. Preserve cross-references between files
```

### Implementation Rules
```markdown
When implementing code:
1. Analyze code dependencies first
2. Plan structured changes
3. Make incremental changes
4. Test thoroughly
5. Document in memory files
```

### Documentation Rules
```markdown
Documentation must:
1. Use consistent formatting
2. Follow heading hierarchy
3. Include practical examples
4. Cross-reference related documents
5. Update memory files when changed
```
