---
description: Central reference for all Cursor rule management within the @bfra-me/.github repository, providing AI assistants with a comprehensive framework for applying, validating, and maintaining project-specific guidelines
globs: **/*
alwaysApply: true
---
# @bfra-me/.github - Cursor Rule Management

> **AI-DIRECTIVE:** Apply rules based on context relevance and explicit priority levels, following preprocessing guidelines before implementation; maintain consistent patterns across related rules.

## Purpose and Scope

This rule serves as the central reference for all Cursor rule management within the @bfra-me/.github repository. It provides AI assistants with a comprehensive framework for applying, validating, and maintaining project-specific guidelines across development contexts.

- **When to Apply:** During all AI interactions within this repository
- **Priority Level:** High - this rule establishes the foundation for all others
- **Interaction Effects:** Defines relationships between all other rules

## Core Directives

<!-- AI-PATTERN-START: core_directives -->
- **✅ ALWAYS:**
  - Follow preprocessing steps in rule-preprocessing.mdc before applying any rules
  - Load relevant rules based on context
  - Check dependencies between rules
  - Apply rule guidance in proper sequence
  - Validate outcomes against expectations
  - Update knowledge with new patterns
  - Document rule applications for future reference

- **❌ NEVER:**
  - Skip preprocessing steps
  - Apply rules without considering dependencies
  - Ignore priority levels in rule application
  - Apply conflicting rule directives without resolution
  - Fail to document rule applications
<!-- AI-PATTERN-END: core_directives -->

## AI Consumption Model

<!-- AI-PATTERN-START: consumption_model -->
Cursor rules are specifically designed to be consumed by AI assistants operating within the Cursor IDE environment. They serve as contextual guidance that helps AI agents:

- **Understand Project Context**: Rules provide AI agents with project-specific information that may not be inferrable from code alone.
- **Follow Consistent Patterns**: Rules establish consistent patterns for AI responses across different interactions.
- **Apply Domain Knowledge**: Rules encode domain-specific knowledge relevant to the project.
- **Prioritize Requirements**: Rules help AI agents understand which requirements take precedence.

### Key Distinctions from Human Documentation

- **Directive-Focused**: Rules emphasize clear directives that can be parsed and applied by AI agents.
- **Context-Sensitive**: Rules include markers for when they should be applied or ignored.
- **AI-Optimized Structure**: Content is structured to facilitate AI comprehension rather than human reading flow.
- **Explicit Prioritization**: Rules include explicit priority information to resolve conflicts.

### Rule Consumption Process

1. **Rule Loading**: AI assistant loads relevant rules based on context
2. **Rule Prioritization**: Rules are prioritized based on relevance to the current query
3. **Rule Application**: AI applies rule directives to generate responses
4. **Rule Verification**: AI validates its output against rule requirements
<!-- AI-PATTERN-END: consumption_model -->

## Rule Categories

<!-- AI-PATTERN-START: rule_categories -->
### 1. System Architecture
- **Architecture understanding**
  - System structure
  - Component relationships
  - Directory organization

### 2. Development Process
- **Planning workflow**
  - Requirements analysis
  - Solution design
- **Implementation guidelines**
  - Coding standards
  - Testing protocols
- **Error management**
  - Debugging protocols
  - Error documentation

### 3. Knowledge Management
- **Memory files**
  - Documentation structure
  - Content organization
- **Lessons learned**
  - Pattern recognition
  - Development history
<!-- AI-PATTERN-END: rule_categories -->

## Rule Relationship Visualization

<!-- AI-PATTERN-START: relationship_visualization -->
This visualization depicts the relationships between different rules, showing dependencies, complementary connections, and priority levels.

```mermaid
%% Rule Relationship Diagram with Priority and Dependency Indicators
%% Priority Levels: High = red border, Medium = blue border, Low = green border
%% Relationship Types: requires = solid arrow, complements = dashed arrow, extended by = dotted arrow

flowchart TD
    %% Core Rules (High Priority)
    rules["rules.mdc"]:::highPriority
    preprocessing["rule-preprocessing.mdc"]:::highPriority
    cursor["cursor-rules.mdc"]:::highPriority

    %% System Architecture
    arch["architecture-understanding.mdc"]:::mediumPriority
    mcp["mcp-tool-usage.mdc"]:::mediumPriority

    %% Development Process
    workflow["development-workflow.mdc"]:::highPriority
    implement["implement.mdc"]:::highPriority
    error["error-management.mdc"]:::mediumPriority
    changesets["changesets.mdc"]:::mediumPriority
    coding["coding-best-practices.mdc"]:::mediumPriority
    github["github-actions.mdc"]:::mediumPriority
    pnpm["pnpm.mdc"]:::mediumPriority
    renovate["renovate.mdc"]:::mediumPriority
    typescript["typescript.mdc"]:::mediumPriority

    %% Knowledge Management
    memory["memory-files.mdc"]:::highPriority
    templates["memory-templates.mdc"]:::mediumPriority
    context["content-context.mdc"]:::mediumPriority
    validation["change-validation.mdc"]:::mediumPriority
    knowledge["knowledge-graph.mdc"]:::mediumPriority
    lessons["lessons-learned.mdc"]:::lowPriority
    improve["self-improve.mdc"]:::mediumPriority
    doctech["documentation-and-tech-stack.mdc"]:::lowPriority

    %% Core Rule Relationships
    rules ==> preprocessing
    rules ==> cursor
    preprocessing --> context
    preprocessing --> validation
    improve -.-> rules

    %% System Architecture Relationships
    cursor --> arch
    preprocessing --> mcp

    %% Development Process Relationships
    rules --> workflow
    workflow --> implement
    workflow --> error
    rules --> changesets
    rules --> coding
    rules --> github
    rules --> pnpm
    rules --> renovate
    rules --> typescript

    %% Knowledge Management Relationships
    rules --> memory
    memory --> templates
    memory -.-> context
    memory -.-> validation
    memory --> knowledge
    memory --> lessons
    lessons -.-> improve
    memory --> doctech

    %% Cross-Category Relationships
    implement -.-> error
    cursor -.-> memory

    %% Style Definitions
    classDef highPriority stroke:#f66,stroke-width:3px;
    classDef mediumPriority stroke:#66f,stroke-width:2px;
    classDef lowPriority stroke:#6d6,stroke-width:1px;
```
<!-- AI-PATTERN-END: relationship_visualization -->

## Rule Index

<!-- AI-PATTERN-START: rule_index -->
| Rule File | Description | Category |
|-----------|-------------|----------|
| **[`architecture-understanding.mdc`](mdc:.cursor/rules/architecture-understanding.mdc)** | Guidelines for understanding and interpreting architectural diagrams and project directory structure | System Architecture |
| **[`change-validation.mdc`](mdc:.cursor/rules/change-validation.mdc)** | Guidelines for validating changes to memory files | Development Process |
| **[`changesets.mdc`](mdc:.cursor/rules/changesets.mdc)** | Guidelines for using Changesets (pnpm changeset) to manage versioning and changelogs | Development Process |
| **[`coding-best-practices.mdc`](mdc:.cursor/rules/coding-best-practices.mdc)** | Defines best practices for implementing code changes | Development Process |
| **[`content-context.mdc`](mdc:.cursor/rules/content-context.mdc)** | Guidelines for AI agents to understand content context when updating memory files | Knowledge Management |
| **[`cursor-rules.mdc`](mdc:.cursor/rules/cursor-rules.mdc)** | Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness | System Architecture |
| **[`development-workflow.mdc`](mdc:.cursor/rules/development-workflow.mdc)** | Comprehensive framework for planning and implementing development tasks (includes planning guidelines formerly in plan.mdc) | Development Process |
| **[`documentation-and-tech-stack.mdc`](mdc:.cursor/rules/documentation-and-tech-stack.mdc)** | Guidelines for using documentation and the project's tech stack | Knowledge Management |
| **[`error-management.mdc`](mdc:.cursor/rules/error-management.mdc)** | Framework for diagnosing, resolving, and documenting errors | Development Process |
| **[`github-actions.mdc`](mdc:.cursor/rules/github-actions.mdc)** | Guidelines for GitHub Actions workflows, including automation, testing, security, and CI/CD integration | Development Process |
| **[`implement.mdc`](mdc:.cursor/rules/implement.mdc)** | Comprehensive instructions for implementing code changes | Development Process |
| **[`knowledge-graph.mdc`](mdc:.cursor/rules/knowledge-graph.mdc)** | Guidelines for managing and maintaining the knowledge graph accessed through the server-memory MCP server | Knowledge Management |
| **[`lessons-learned.mdc`](mdc:.cursor/rules/lessons-learned.mdc)** | A learning journal that captures important patterns, preferences, and project intelligence for future work | Knowledge Management |
| **[`mcp-tool-usage.mdc`](mdc:.cursor/rules/mcp-tool-usage.mdc)** | Guidelines for using tools provided by available MCP (Model Context Protocol) servers | System Architecture |
| **[`memory-files.mdc`](mdc:.cursor/rules/memory-files.mdc)** | Guidelines for creating and maintaining project Memory Files for comprehensive project documentation | Knowledge Management |
| **[`memory-templates.mdc`](mdc:.cursor/rules/memory-templates.mdc)** | Standard templates for memory files to ensure consistent structure | Knowledge Management |
| **[`pnpm.mdc`](mdc:.cursor/rules/pnpm.mdc)** | Guidelines for using pnpm as the package manager | Development Process |
| **[`renovate.mdc`](mdc:.cursor/rules/renovate.mdc)** | Guidelines for using Renovate to manage dependencies | Development Process |
| **[`rule-preprocessing.mdc`](mdc:.cursor/rules/rule-preprocessing.mdc)** | Guidelines for AI agents to process rules before responding to tasks | System Architecture |
| **[`rules.mdc`](mdc:.cursor/rules/rules.mdc)** | This file; Provides a central index of Cursor rules; includes instructions that must be followed in every interaction | Development Process |
| **[`self-improve.mdc`](mdc:.cursor/rules/self-improve.mdc)** | Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices | Knowledge Management |
| **[`typescript.mdc`](mdc:.cursor/rules/typescript.mdc)** | Guidelines for using TypeScript in the project | Development Process |
<!-- AI-PATTERN-END: rule_index -->

## Rule Application Protocol

<!-- AI-PATTERN-START: application_protocol -->
> **Important:** Before applying any rules, follow the preprocessing steps in [rule-preprocessing.mdc](mdc:.cursor/rules/rule-preprocessing.mdc). These steps are critical for properly understanding, prioritizing, and applying rules effectively.

### 1. Context Loading
- **Load relevant rules based on context**
- **Check dependencies between rules**
- **Verify integration requirements**

### 2. Rule Processing
- **Apply rule guidance in proper sequence**
- **Validate outcomes against expectations**
- **Update knowledge with new patterns**

### 3. Documentation
- **Record rule applications for future reference**
- **Track rule effectiveness**
- **Update pattern libraries**
<!-- AI-PATTERN-END: application_protocol -->

## Implementation Guidelines

<!-- AI-PATTERN-START: implementation_guidelines -->
### Tool Integration

#### 1. Knowledge Graph
- **Store rule metadata centrally**
- **Track relationships between rules**
- **Monitor usage patterns**

#### 2. MCP Tools
- **Use Sequential Thinking for complex analysis**
- **Apply web search for research**
- **Manage content context properly**

### Always Follow These Guidelines
1. **Split into multiple responses** if one response isn't enough
2. **Suggest improvements** for code stability or scalability
3. **Offer strategies** to enhance performance or security
4. **Recommend methods** for improving readability or maintainability
5. **Identify areas** for further investigation
<!-- AI-PATTERN-END: implementation_guidelines -->

## Index Maintenance

<!-- AI-PATTERN-START: index_maintenance -->
### When to Update the Index

1. **New Rule Creation**
   - When a new rule file is created in `.cursor/rules/`
   - When a rule is renamed or moved
   - When a rule is deleted

2. **Rule Description Changes**
   - When a rule's primary purpose or scope changes significantly
   - When a rule's description becomes outdated or inaccurate
   - When a rule's functionality expands or contracts

### How to Update the Index

1. **Adding New Rules**
   ```markdown
   | Rule File | Description | Category |
   |-----------|-------------|----------|
   | **[`new-rule.mdc`](mdc:.cursor/rules/new-rule.mdc)** | Brief description of the rule's purpose | System Architecture |
   ```
   - Place the entry in alphabetical order in the Rule Index
   - Use the exact filename in the link
   - Keep descriptions concise and focused on the primary purpose
   - Add the rule to the appropriate category in the Rule Index
     - Create a new category if none exists
     - Add the rule to the correct section of the category

2. **Updating Descriptions**
   - Preserve the link format
   - Update only the description part
   - Maintain consistent tone and length with other entries

3. **Removing Rules**
   - Remove the entire entry for deleted rules
   - Update any references to the removed rule in other rules

### Validation Steps

1. **Before Updating**
   - Verify the rule file exists in `.cursor/rules/`
   - Check the rule's frontmatter for the official description
   - Review recent changes to understand the context

2. **After Updating**
   - Verify alphabetical ordering
   - Check link formatting
   - Ensure consistent style with other entries
   - Validate all links are working
<!-- AI-PATTERN-END: index_maintenance -->

## Anti-Patterns to Avoid

<!-- AI-PATTERN-START: anti_patterns -->
### Anti-Pattern 1: Ignoring Preprocessing Steps

```markdown
// ❌ DON'T: Jump directly to applying a specific rule
Based on the typescript.mdc rule, I'll implement the interface as follows...
```

**Why This Is Problematic:**
- Skips critical context loading and prioritization
- May miss conflicting directives from other rules
- Fails to consider rule dependencies

### Anti-Pattern 2: Selective Rule Application

```markdown
// ❌ DON'T: Apply only convenient parts of rules
I'll follow the TypeScript naming conventions but ignore the error handling requirements...
```

**Why This Is Problematic:**
- Creates inconsistent implementation
- Undermines the integrated rule system
- Leads to technical debt and maintenance issues
<!-- AI-PATTERN-END: anti_patterns -->

## Decision Trees for Edge Cases

<!-- AI-PATTERN-START: decision_tree -->
### Scenario: Rule Conflict Resolution

1. **If** conflicting directives from different rules exist:
   - Check priority levels (high > medium > low)
   - Apply the directive from the higher priority rule

2. **If** rules have the same priority level:
   - Check for explicit dependency relationships
   - Apply the directive from the dependency rule first
   - Then apply non-conflicting directives from the dependent rule

3. **If** no clear resolution through priority or dependencies:
   - Use the more specific rule over the more general rule
   - Document the conflict for future rule improvement

### Scenario: Missing Rule Guidance

1. **If** no specific rule exists for a particular situation:
   - Check for similar situations in existing rules
   - Apply general principles from related rules
   - Document the gap for future rule enhancement

2. **If** multiple applicable rules provide partial guidance:
   - Synthesize guidance while maintaining consistency
   - Prioritize critical security and stability concerns
   - Document the synthesis approach for future reference
<!-- AI-PATTERN-END: decision_tree -->

## Related Rules

<!-- AI-PATTERN-START: related_rules -->
- [rule-preprocessing.mdc](mdc:.cursor/rules/rule-preprocessing.mdc) (requires) - Provides critical preprocessing steps that must be followed before applying rules
- [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) (requires) - Defines proper formatting and structure for rules
- [content-context.mdc](mdc:.cursor/rules/content-context.mdc) (complements) - Guides understanding content context when updating files
- [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc) (complements) - Provides validation process for changes
- [self-improve.mdc](mdc:.cursor/rules/self-improve.mdc) (extended by) - Framework for continuously improving rules based on emerging patterns and best practices
<!-- AI-PATTERN-END: related_rules -->

## Version History

<!-- AI-PATTERN-START: version_history -->
- v1.0.0 (2023-11-27): Initial versioned migration to AI-focused template format
- v0.9.0 (2023-11-15): Added explicit AI consumption model guidance
- v0.8.0 (2023-10-20): Enhanced rule relationship visualization with priority indicators
- v0.7.0 (2023-09-05): Added comprehensive rule index with categorization
- v0.6.0 (2023-08-10): Implemented rule application protocol
<!-- AI-PATTERN-END: version_history -->
