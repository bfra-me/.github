---
description:
globs:
alwaysApply: true
---

# @bfra-me/.github - Cursor Rule Management

This document serves as the central reference for all Cursor rule management within the @bfra-me/.github repository, providing AI assistants with a comprehensive framework for applying, validating, and maintaining project-specific guidelines across development contexts.

## Rule Categories

### 1. System Architecture
- **Architecture understanding**
  - System structure
  - Component relationships
  - Directory organization

### 2. Development Process
- **Planning workflow**
  - Requirements analysis
  - Solution design
- **Implementation guidelines**
  - Coding standards
  - Testing protocols
- **Error management**
  - Debugging protocols
  - Error documentation

### 3. Knowledge Management
- **Memory files**
  - Documentation structure
  - Content organization
- **Lessons learned**
  - Pattern recognition
  - Development history

## Rule Index

This section provides a quick reference to all active Cursor rules within this repository, located in the `.cursor/rules` directory. These rules define processes, structures, and guidelines for development.

| Rule File | Description | Category |
|-----------|-------------|----------|
| **[`architecture-understanding.mdc`](mdc:.cursor/rules/architecture-understanding.mdc)** | Guidelines for understanding and interpreting architectural diagrams and project directory structure | System Architecture |
| **[`change-validation.mdc`](mdc:.cursor/rules/change-validation.mdc)** | Guidelines for validating changes to memory files | Development Process |
| **[`changesets.mdc`](mdc:.cursor/rules/changesets.mdc)** | Guidelines for using Changesets (pnpm changeset) to manage versioning and changelogs | Development Process |
| **[`coding-best-practices.mdc`](mdc:.cursor/rules/coding-best-practices.mdc)** | Defines best practices for implementing code changes | Development Process |
| **[`content-context.mdc`](mdc:.cursor/rules/content-context.mdc)** | Guidelines for AI agents to understand content context when updating memory files | Knowledge Management |
| **[`cursor-rules.mdc`](mdc:.cursor/rules/cursor-rules.mdc)** | Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness | System Architecture |
| **[`development-workflow.mdc`](mdc:.cursor/rules/development-workflow.mdc)** | Framework for planning and implementing development tasks | Development Process |
| **[`documentation-and-tech-stack.mdc`](mdc:.cursor/rules/documentation-and-tech-stack.mdc)** | Guidelines for using documentation and the project's tech stack | Knowledge Management |
| **[`error-management.mdc`](mdc:.cursor/rules/error-management.mdc)** | Framework for diagnosing, resolving, and documenting errors | Development Process |
| **[`github-actions.mdc`](mdc:.cursor/rules/github-actions.mdc)** | Guidelines for GitHub Actions workflows, including automation, testing, security, and CI/CD integration | Development Process |
| **[`index.mdc`](mdc:.cursor/rules/index.mdc)** | This file; provides a central index of the project's Cursor rules | Knowledge Management |
| **[`implement.mdc`](mdc:.cursor/rules/implement.mdc)** | Comprehensive instructions for implementing code changes | Development Process |
| **[`knowledge-graph.mdc`](mdc:.cursor/rules/knowledge-graph.mdc)** | Guidelines for managing and maintaining the knowledge graph accessed through the server-memory MCP server | Knowledge Management |
| **[`lessons-learned.mdc`](mdc:.cursor/rules/lessons-learned.mdc)** | A learning journal that captures important patterns, preferences, and project intelligence for future work | Knowledge Management |
| **[`mcp-tool-usage.mdc`](mdc:.cursor/rules/mcp-tool-usage.mdc)** | Guidelines for using tools provided by available MCP (Model Context Protocol) servers | System Architecture |
| **[`memory-files.mdc`](mdc:.cursor/rules/memory-files.mdc)** | Guidelines for creating and maintaining project Memory Files for comprehensive project documentation | Knowledge Management |
| **[`memory-templates.mdc`](mdc:.cursor/rules/memory-templates.mdc)** | Standard templates for memory files to ensure consistent structure | Knowledge Management |
| **[`plan.mdc`](mdc:.cursor/rules/plan.mdc)** | Guidelines for planning and formulating solutions | Development Process |
| **[`pnpm.mdc`](mdc:.cursor/rules/pnpm.mdc)** | Guidelines for using pnpm as the package manager | Development Process |
| **[`renovate.mdc`](mdc:.cursor/rules/renovate.mdc)** | Guidelines for using Renovate to manage dependencies | Development Process |
| **[`rule-preprocessing.mdc`](mdc:.cursor/rules/rule-preprocessing.mdc)** | Guidelines for AI agents to process rules before responding to tasks | System Architecture |
| **[`rule-refresher.mdc`](mdc:.cursor/rules/rule-refresher.mdc)** | Guidelines for periodic review and refresh of Cursor rules | Knowledge Management |
| **[`rules.mdc`](mdc:.cursor/rules/rules.mdc)** | Instructions that must be followed in every interaction | System Architecture |
| **[`self-improve.mdc`](mdc:.cursor/rules/self-improve.mdc)** | Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices | Knowledge Management |
| **[`typescript.mdc`](mdc:.cursor/rules/typescript.mdc)** | Guidelines for using TypeScript in the project | Development Process |

## Rule Application Protocol

### 1. Context Loading
- **Load relevant rules based on context**
- **Check dependencies between rules**
- **Verify integration requirements**

### 2. Rule Processing
- **Apply rule guidance in proper sequence**
- **Validate outcomes against expectations**
- **Update knowledge with new patterns**

### 3. Documentation
- **Record rule applications for future reference**
- **Track rule effectiveness**
- **Update pattern libraries**

## Tool Integration

### 1. Knowledge Graph
- **Store rule metadata centrally**
- **Track relationships between rules**
- **Monitor usage patterns**

### 2. MCP Tools
- **Use Sequential Thinking for complex analysis**
- **Apply web search for research**
- **Manage content context properly**

## Validation Requirements

### 1. Rule Validation
- **Verify dependency relationships**
- **Check integration compliance**
- **Validate content structure**

### 2. Application Validation
- **Ensure process compliance**
- **Verify expected outcomes**
- **Match against known patterns**

## Improvement Protocol

### 1. Pattern Recognition
- **Monitor rule usage frequency**
- **Identify common application patterns**
- **Track effectiveness metrics**

### 2. Rule Updates
- **Manage rule versions properly**
- **Update dependencies when needed**
- **Refresh documentation regularly**

## Always Follow These Guidelines
1. **Split into multiple responses** if one response isn't enough
2. **Suggest improvements** for code stability or scalability
3. **Offer strategies** to enhance performance or security
4. **Recommend methods** for improving readability or maintainability
5. **Identify areas** for further investigation

## Rule Index Maintenance

### When to Update the Index

1. **New Rule Creation**
   - When a new rule file is created in `.cursor/rules/`
   - When a rule is renamed or moved
   - When a rule is deleted

2. **Rule Description Changes**
   - When a rule's primary purpose or scope changes significantly
   - When a rule's description becomes outdated or inaccurate
   - When a rule's functionality expands or contracts

### How to Update the Index

1. **Adding New Rules**
   ```markdown
   | Rule File | Description | Category |
   |-----------|-------------|----------|
   | **[`new-rule.mdc`](mdc:.cursor/rules/new-rule.mdc)** | Brief description of the rule's purpose | System Architecture |
   ```
   - Place the entry in alphabetical order in the Rule Index
   - Use the exact filename in the link
   - Keep descriptions concise and focused on the primary purpose
   - Add the rule to the appropriate category in the Rule Index
     - Create a new category if none exists
     - Add the rule to the correct section of the category

2. **Updating Descriptions**
   - Preserve the link format
   - Update only the description part
   - Maintain consistent tone and length with other entries

3. **Removing Rules**
   - Remove the entire entry for deleted rules
   - Update any references to the removed rule in other rules

### Validation Steps

1. **Before Updating**
   - Verify the rule file exists in `.cursor/rules/`
   - Check the rule's frontmatter for the official description
   - Review recent changes to understand the context

2. **After Updating**
   - Verify alphabetical ordering
   - Check link formatting
   - Ensure consistent style with other entries
   - Validate all links are working

### Integration with Other Rules

- Follow formatting guidelines from [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)
- Apply content context principles from [content-context.mdc](mdc:.cursor/rules/content-context.mdc)
- Follow change validation process from [change-validation.mdc](mdc:.cursor/rules/change-validation.mdc)

### Maintenance Checklist

✅ Verify all rules in `.cursor/rules/` are listed
✅ Ensure descriptions match current rule purposes
✅ Check for consistent formatting and style
✅ Validate all rule links
✅ Update related rules if references change
