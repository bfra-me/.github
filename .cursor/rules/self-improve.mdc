---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: false
---

# Self-Improvement System for Cursor Rules

- **Rule Improvement Triggers:**
  - **Code Pattern Triggers:**
    - New code patterns not covered by existing rules
    - Repeated similar implementations across files
    - Common error patterns that could be prevented
    - New libraries or tools being used consistently
    - Emerging best practices in the codebase

  - **Documentation Triggers:**
    - Repeated similar documentation structures
    - Common review feedback patterns
    - New documentation requirements
    - Changes in project standards

  - **Process Triggers:**
    - Changes in development workflow
    - New integration requirements
    - Security or compliance updates
    - Performance optimization patterns

- **Rule Review Schedule:**
  - **Core Rules (Every Conversation):**
    - [rules.mdc](mdc:.cursor/rules/rules.mdc)
    - [memory_files.mdc](mdc:.cursor/rules/memory_files.mdc)
    - [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc)

  - **Task-Specific Rules (On Mode Switch):**
    - Plan mode: [plan.mdc](mdc:.cursor/rules/plan.mdc)
    - Implement mode: [implement.mdc](mdc:.cursor/rules/implement.mdc)
    - Debug mode: [error-management.mdc](mdc:.cursor/rules/error-management.mdc)

  - **Domain-Specific Rules (Context-Based):**
    - TypeScript: [typescript.mdc](mdc:.cursor/rules/typescript.mdc)
    - GitHub Actions: [github-actions.mdc](mdc:.cursor/rules/github-actions.mdc)
    - Package management: [pnpm.mdc](mdc:.cursor/rules/pnpm.mdc)

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });

  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```
- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

  - **Improvement Cycle:**
  ```mermaid
  flowchart TD
      A[Monitor Patterns] --> B[Identify Improvements]
      B --> C[Update Rules]
      C --> D[Validate Changes]
      D --> E[Document Updates]
      E --> A
  ```

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

- **Progressive Learning System:**
  - **Level 1: Foundation**
    - **Core Knowledge:**
      - Learn project structure and organization
      - Master Memory Files structure and formatting
      - Follow basic documentation conventions
      - Understand essential rule dependencies

  - **Level 2: Proficiency**
    - **Advanced Application:**
      - Implement task-specific rules effectively
      - Apply domain-specific best practices
      - Master error handling patterns
      - Manage cross-rule dependencies

  - **Level 3: Mastery**
    - **Strategic Integration:**
      - Resolve rule priority conflicts effectively
      - Handle complex edge cases systematically
      - Implement advanced optimization patterns
      - Guide strategic rule evolution and updates

- **Rule Summary Cards:**
  - Create a summary card for each rule
  - **Card Format:**
    - Rule name
    - Description
    - Examples (if applicable)
    - References (if applicable)
    - Version history

Follow [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) for proper rule formatting and structure.
